{"version":3,"sources":["components/Field.tsx","index.tsx"],"names":["Field","props","fieldValue","sdk","field","getValue","useState","value","setValue","sumTime","times","sumSeconds","forEach","time","a","split","seconds","Date","toISOString","substr","useEffect","window","startAutoResizer","onExternalChange","onValueChanged","onChange","e","currentTarget","removeValue","className","style","marginBottom","width","type","id","testId","disabled","marginRight","buttonType","onClick","WARMUP","entry","fields","warmUp","POWER1","powerSet1","POWER2","powerSet2","POWER3","powerSet3","POWER4","powerSet4","POWER5","powerSet5","POWER6","powerSet6","POWER7","powerSet7","POWER8","powerSet8","POWER9","powerSet9","POWER10","powerSet10","COOLDOWN","coolDown","UPDATE","map","x","totalExerciseDuration","init","root","document","getElementById","location","locations","LOCATION_ENTRY_FIELD","component","componentLocationSetting","is","render"],"mappings":"sOA4HeA,EA9GD,SAACC,GACb,IAAMC,EAAaD,EAAME,IAAIC,MAAMC,WADA,EAETC,mBAASJ,GAAc,IAFd,mBAE5BK,EAF4B,KAErBC,EAFqB,KAK7BC,EAAU,SAACC,GACf,IAAIC,EAAa,EAQjB,OANAD,EAAME,SAAQ,SAACC,GACb,IAAIC,EAAID,EAAKE,MAAM,KACfC,EAAkB,IAAPF,EAAE,GAAU,GAAa,IAAPA,EAAE,KAAWA,EAAE,GAChDH,GAAcK,KAGT,IAAIC,KAAkB,IAAbN,GAAmBO,cAAcC,OAAO,GAAI,IAG9DC,qBAAU,WACRnB,EAAME,IAAIkB,OAAOC,sBAGnB,IAAMC,EAAmB,SAAChB,GACxBC,EAASD,IAGXa,qBAAU,WAKR,OAHiCnB,EAAME,IAAIC,MAAMoB,eAC/CD,MAKJ,IAwCME,EAAW,SAACC,GAChB,IAAMnB,EAAQmB,EAAEC,cAAcpB,MAC9BC,EAASD,GACLA,EACFN,EAAME,IAAIC,MAAMI,SAASD,GAEzBN,EAAME,IAAIC,MAAMwB,eAIpB,OACE,gCACE,eAAC,IAAD,CAAMC,UAAU,YAAYC,MAAO,CAAEC,aAAc,GAAnD,UACE,cAAC,IAAD,CACEC,MAAM,QACNC,KAAK,OACLC,GAAG,iBACHC,OAAO,iBACP5B,MAAOA,EACPkB,SAAUA,EACVW,UAAQ,EACRP,UAAU,uBACVC,MAAO,CAAEO,YAAa,MAExB,cAAC,IAAD,CACER,UAAU,gBACVS,WAAW,UACXC,QAnEW,WACjB,IAAMC,EAASvC,EAAME,IAAIsC,MAAMC,OAAOC,OAAOtC,WACvCuC,EAAS3C,EAAME,IAAIsC,MAAMC,OAAOG,UAAUxC,WAC1CyC,EAAS7C,EAAME,IAAIsC,MAAMC,OAAOK,UAAU1C,WAC1C2C,EAAS/C,EAAME,IAAIsC,MAAMC,OAAOO,UAAU5C,WAC1C6C,EAASjD,EAAME,IAAIsC,MAAMC,OAAOS,UAAU9C,WAC1C+C,EAASnD,EAAME,IAAIsC,MAAMC,OAAOW,UAAUhD,WAC1CiD,EAASrD,EAAME,IAAIsC,MAAMC,OAAOa,UAAUlD,WAC1CmD,EAASvD,EAAME,IAAIsC,MAAMC,OAAOe,UAAUpD,WAC1CqD,EAASzD,EAAME,IAAIsC,MAAMC,OAAOiB,UAAUtD,WAC1CuD,EAAS3D,EAAME,IAAIsC,MAAMC,OAAOmB,UAAUxD,WAC1CyD,EAAU7D,EAAME,IAAIsC,MAAMC,OAAOqB,WAAW1D,WAC5C2D,EAAW/D,EAAME,IAAIsC,MAAMC,OAAOuB,SAAS5D,WAmB3C6D,EAhBM,sBACP1B,GADO,YAEPI,GAFO,YAGPE,GAHO,YAIPE,GAJO,YAKPE,GALO,YAMPE,GANO,YAOPE,GAPO,YAQPE,GARO,YASPE,GATO,YAUPE,GAVO,YAWPE,GAXO,YAYPE,IAIiBG,KAAI,SAACC,GAAD,OAAOA,EAAEC,yBAEnC5C,EAAS,CACPE,cAAe,CACbpB,MAAOE,EAAQyD,OA6Bf,0BAQF,cAAC,IAAD,gECjGJI,gBAAK,SAACnE,GACJ,IAAMoE,EAAOC,SAASC,eAAe,QAKH,CAChC,CACEC,SAAUC,YAAUC,qBACpBC,UAAW,cAAC,EAAD,CAAO1E,IAAKA,MAKDS,SAAQ,SAACkE,GAC7B3E,EAAIuE,SAASK,GAAGD,EAAyBJ,WAC3CM,iBAAOF,EAAyBD,UAAWN,W","file":"static/js/main.611156ab.chunk.js","sourcesContent":["// @ts-nocheck\nimport React, { useEffect, useState } from \"react\";\nimport {\n  TextInput,\n  Button,\n  Flex,\n  HelpText,\n} from \"@contentful/forma-36-react-components\";\nimport { FieldExtensionSDK } from \"@contentful/app-sdk\";\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK;\n}\n\nconst Field = (props: FieldProps) => {\n  const fieldValue = props.sdk.field.getValue();\n  const [value, setValue] = useState(fieldValue || []);\n\n  // Calc total time for Workouts.\n  const sumTime = (times) => {\n    let sumSeconds = 0;\n\n    times.forEach((time) => {\n      let a = time.split(\":\");\n      let seconds = +a[0] * 60 * 60 + +a[1] * 60 + +a[2];\n      sumSeconds += seconds;\n    });\n\n    return new Date(sumSeconds * 1000).toISOString().substr(11, 8);\n  };\n\n  useEffect(() => {\n    props.sdk.window.startAutoResizer();\n  });\n\n  const onExternalChange = (value) => {\n    setValue(value);\n  };\n\n  useEffect(() => {\n    // Handler for external field value changes (e.g. when multiple authors are working on the same entry).\n    const detachValueChangeHandler = props.sdk.field.onValueChanged(\n      onExternalChange\n    );\n    return detachValueChangeHandler;\n  });\n\n  const handleCalc = () => {\n    const WARMUP = props.sdk.entry.fields.warmUp.getValue();\n    const POWER1 = props.sdk.entry.fields.powerSet1.getValue();\n    const POWER2 = props.sdk.entry.fields.powerSet2.getValue();\n    const POWER3 = props.sdk.entry.fields.powerSet3.getValue();\n    const POWER4 = props.sdk.entry.fields.powerSet4.getValue();\n    const POWER5 = props.sdk.entry.fields.powerSet5.getValue();\n    const POWER6 = props.sdk.entry.fields.powerSet6.getValue();\n    const POWER7 = props.sdk.entry.fields.powerSet7.getValue();\n    const POWER8 = props.sdk.entry.fields.powerSet8.getValue();\n    const POWER9 = props.sdk.entry.fields.powerSet9.getValue();\n    const POWER10 = props.sdk.entry.fields.powerSet10.getValue();\n    const COOLDOWN = props.sdk.entry.fields.coolDown.getValue();\n\n    // Adding Fields together in a Array.\n    const result = [\n      ...WARMUP,\n      ...POWER1,\n      ...POWER2,\n      ...POWER3,\n      ...POWER4,\n      ...POWER5,\n      ...POWER6,\n      ...POWER7,\n      ...POWER8,\n      ...POWER9,\n      ...POWER10,\n      ...COOLDOWN,\n    ];\n\n    // Getting the totalDuration for Each field\n    const UPDATE = result.map((x) => x.totalExerciseDuration);\n\n    onChange({\n      currentTarget: {\n        value: sumTime(UPDATE),\n      },\n    });\n  };\n\n  const onChange = (e) => {\n    const value = e.currentTarget.value;\n    setValue(value);\n    if (value) {\n      props.sdk.field.setValue(value);\n    } else {\n      props.sdk.field.removeValue();\n    }\n  };\n\n  return (\n    <div>\n      <Flex className=\"container\" style={{ marginBottom: 5 }}>\n        <TextInput\n          width=\"small\"\n          type=\"text\"\n          id=\"total-duration\"\n          testId=\"total-duration\"\n          value={value}\n          onChange={onChange}\n          disabled\n          className=\"input-total-duration\"\n          style={{ marginRight: 10 }}\n        />\n        <Button\n          className=\"action-button\"\n          buttonType=\"primary\"\n          onClick={handleCalc}\n        >\n          Calculate\n        </Button>\n      </Flex>\n      <HelpText>Calculate the Total Duration for the workout.</HelpText>\n    </div>\n  );\n};\n\nexport default Field;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  FieldExtensionSDK,\n  BaseExtensionSDK,\n  init,\n  locations,\n} from '@contentful/app-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport '@contentful/forma-36-tokens/dist/css/index.css';\nimport './index.css';\n\nimport Field from './components/Field';\nimport LocalhostWarning from './components/LocalhostWarning';\n\nif (process.env.NODE_ENV === 'development' && window.self === window.top) {\n  // You can remove this if block before deploying your app\n  const root = document.getElementById('root');\n  render(<LocalhostWarning />, root);\n} else {\n  init((sdk: BaseExtensionSDK) => {\n    const root = document.getElementById('root');\n\n    // All possible locations for your app\n    // Feel free to remove unused locations\n    // Dont forget to delete the file too :)\n    const ComponentLocationSettings = [\n      {\n        location: locations.LOCATION_ENTRY_FIELD,\n        component: <Field sdk={sdk as FieldExtensionSDK} />,\n      },\n    ];\n\n    // Select a component depending on a location in which the app is rendered.\n    ComponentLocationSettings.forEach((componentLocationSetting) => {\n      if (sdk.location.is(componentLocationSetting.location)) {\n        render(componentLocationSetting.component, root);\n      }\n    });\n  });\n}\n"],"sourceRoot":""}